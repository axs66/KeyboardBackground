name: CI  # 设置工作流名称为 CI

# 触发事件为 push（每当代码推送到仓库时触发）
on: [push]

jobs:
  build:
    # 设置运行环境为 macOS，确保可以使用 Theos 和其他构建工具
    runs-on: macos-latest

    steps:
      # 第一步：Checkout 代码
      - name: Checkout code  # 这个步骤用于从 GitHub 仓库中拉取代码
        uses: actions/checkout@v3  # 使用 GitHub 官方的 checkout Action
        with:
          submodules: true  # 确保拉取子模块（如果有）

      # 第二步：使用 Theos Setup Action 设置 Theos 环境
      - name: Use Theos Setup Action  # 使用预设的 Theos 环境配置 Action
        uses: axs66/theos-action@main  # 使用 axs66/theos-action 的最新版本

      # 第三步：清理之前生成的 .deb 包
      - name: Clean previous packages  # 这一步会删除上一次生成的 .deb 文件，以便生成新的包
        run: rm -f ${{ github.workspace }}/packages/*.deb  # 删除 `packages` 文件夹下的所有 .deb 文件

      # 第四步：构建 .deb 包
      - name: Build DEB (rootless + roothide)  # 在这个步骤中，构建 .deb 包，并为 rootless 和 roothide 配置包
        run: |
          make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless  # 使用 rootless 模式构建 .deb 包
          make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=roothide  # 使用 roothide 模式构建 .deb 包

      # 第五步：列出生成的 .deb 包
      - name: List generated DEBs  # 这个步骤列出生成的 .deb 包，方便确认包是否生成成功
        run: ls -lh ${{ github.workspace }}/packages  # 显示 `packages` 文件夹中所有 .deb 包的详细信息

      # 第六步：创建 GitHub Release 并上传 .deb 包
      - name: Create GitHub Release  # 这个步骤会创建一个 GitHub Release，并上传所有的 .deb 包
        run: |
          VERSION=0.0.2  # 设定版本号为 0.0.2
          gh release create $VERSION ${{ github.workspace }}/packages/*.deb --title "SwipeInputTweak $VERSION" --notes "自动构建 .deb 安装包"  # 使用 `gh` 命令创建 GitHub Release，并附带标题和更新日志
        env:
          GH_TOKEN: ${{ secrets.PAT }}  # 使用 GitHub 的 Personal Access Token 进行授权

      # 第七步：将生成的 .deb 包上传到工作流工件中
      - name: Upload DEB to workflow artifacts  # 这个步骤会将构建好的 .deb 包上传到工作流工件，方便之后下载
        uses: actions/upload-artifact@v4.3.3  # 使用 GitHub 官方的 upload-artifact Action
        with:
          name: SwipeInputTweak  # 设置工件名称为 SwipeInputTweak
          path: ${{ github.workspace }}/packages/*.deb  # 指定上传的文件路径为 `packages` 文件夹中的所有 .deb 文件
